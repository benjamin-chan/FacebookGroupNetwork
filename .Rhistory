2011, 1, 1286,
2011, 2,  500,
2010, 1, 1693,
2008, 1, 1350,
2007, 1, 1048,
2006, 1,  841,
2005, 1,  791,
2004, 1,  740,
2003, 1,  638,
2002, 1,  529,
2001, 1,  556,
2000, 1,  583
),
ncol=3, byrow=TRUE)
df <- data.frame(M)
names(df) <- c("year", "tickets", "applicants")
totalApplicants <- aggregate(applicants ~ year, data=df, sum)
names(totalApplicants) <- c("year", "totalApplicants")
df <- merge(df, totalApplicants, by="year")
totalTickets <- aggregate(applicants * tickets ~ year, data=df, sum)
names(totalTickets) <- c("year", "totalTickets")
df <- merge(df, totalTickets, by="year")
rstudio::viewData(df)
df$prob <- df$tickets / df$totalTickets
rstudio::viewData(df)
rstudio::viewData(df)
df$applicants[df$year=="2013" & df$tickets==1]
df$totalApplicants[df$year=="2013" & df$tickets==1]
install.packages("sna")
g <- rgrahp(5)
require(sna)
g <- rgraph(5)
g
plot(g)
gplot(g)
g <- rgraph(10)
g
gplot(g)
gplot3d(g)
g <- rgraph(100, mode="graph")
gplot(g)
g <- rgraph(25, mode="graph")
gplot(g)
g
gplot(g, mode="graph")
gplot(g, gmode="graph")
gplot(g, gmode="graph", mode="kamadakawaii")
gplot(g, gmode="graph", mode="kamadakawai")
setwd("C:/Users/chanb/Dropbox/Sandbox/FacebookGroupNetwork")
require(igraph, quietly=TRUE)
# require(sna, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
require(RColorBrewer, quietly=TRUE)
G <- read.graph(file="GroupRunning.gml", format="gml")
G
names(G)
head(V(G))
head(V(G)$GroupOverlap)
grpBS <- V(G)$GroupBananaSluggers
grpTF <- V(G)$GroupTrailFactor
grpBoth <- V(G)$GroupOverlap
summary(grpBS)
table(grpBS)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
table(grpBS)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[!grpBS] <- FALSE
grpTF <- V(G)$GroupTrailFactor
grpTF[!grpTF] <- FALSE
grpBoth <- V(G)$GroupOverlap
grpBoth[!grpBoth] <- FALSE
grpTF <- V(G)$GroupTrailFactor
table(grpTF)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[!grpBS] <- FALSE
grpTF <- as.logical(V(G)$GroupTrailFactor)
grpTF[!grpTF] <- FALSE
grpBoth <- as.logical(V(G)$GroupOverlap)
grpBoth[!grpBoth] <- FALSE
table(grpBoth)
listName <- strsplit(V(G)$label, " ")
nameF <- sapply(listName, head, 1)
nameL <- sapply(listName, tail, 1)
initF <- substr(nameF, 1, 1)
initL <- substr(nameL, 1, 2)
initials <- paste(initF, initL, sep="")
label <- nameF
dfNames <- data.frame(nameF, nameL, initials)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[!grpBS] <- FALSE
grpTF <- as.logical(V(G)$GroupTrailFactor)
grpTF[!grpTF] <- FALSE
grpBoth <- as.logical(V(G)$GroupOverlap)
grpBoth[!grpBoth] <- FALSE
dfMembership <- data.frame(grpBS, grpTF, grpBoth)
table(grpBS, grpTF)
table(grpBS ~ grpTF)
table(grpBS)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[!grpBS] <- FALSE
grpTF <- as.logical(V(G)$GroupTrailFactor)
grpTF[!grpTF] <- FALSE
grpBoth <- as.logical(V(G)$GroupOverlap)
grpBoth[!grpBoth] <- FALSE
dfMembership <- data.frame(grpBS, grpTF, grpBoth)
table(grpBS)
head(grpBS)
grpBS
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[is.na(grpBS)] <- FALSE
grpTF <- as.logical(V(G)$GroupTrailFactor)
grpTF[is.na(grpTF)] <- FALSE
grpBoth <- as.logical(V(G)$GroupOverlap)
grpBoth[is.na(!grpBoth)] <- FALSE
dfMembership <- data.frame(grpBS, grpTF, grpBoth)
table(grpBS)
table(grpBS, grpTF)
add.margins(table(grpBS, grpTF))
margins(table(grpBS, grpTF))
add.margin(table(grpBS, grpTF))
margin.table(table(grpBS, grpTF))
addmargins(table(grpBS, grpTF))
xtable(addmargins(table(grpBS, grpTF)))
xtable(addmargins(table(grpBS, grpTF), digits=0))
xtable(addmargins(table(grpBS, grpTF, digits=0)))
xtable(addmargins(table(grpBS, grpTF)), digits=0)
xtable(addmargins(table(grpBS, grpTF)), digits=0, type="html")
print(xtable(addmargins(table(grpBS, grpTF)), digits=0), type="html")
?print.xtable
?xtable
group <- rep(NA, length(grpBoth))
group <- rep(NA, length(grpBoth))
group[ grpBS & !grpTF] <- 1
group[!grpBS &  grpTF] <- 2
group[ grpBS &  grpTF] <- 3
group <- factor(group, levels=c("BS", "TF", "BS+TF"))
df <- data.frame(dfNames, group)
head(df)
group <- rep(0, length(grpBoth))
group[ grpBS & !grpTF] <- 1
group[!grpBS &  grpTF] <- 2
group[ grpBS &  grpTF] <- 3
group <- factor(group, levels=c("BS", "TF", "BS+TF"))
df <- data.frame(dfNames, group)
head(df)
?factor
group <- factor(group, labels=c("BS", "TF", "BS+TF"))
group <- rep(NA, length(grpBoth))
group[ grpBS & !grpTF] <- "BS"
group[!grpBS &  grpTF] <- "TF"
group[ grpBS &  grpTF] <- "BS+TF"
group <- factor(group)
df <- data.frame(dfNames, group)
head(df)
table(group)
xtable(group)
xtable(df$group)
print(df$group)
print(table(df$group))
print(xtable(table(df$group)))
print(xtable(table(df$group)), type="html")
sum(df$group == "BS+TF") / length(df$group) * 100
format(sum(df$group == "BS+TF") / length(df$group) * 100, digist=3)
format(sum(df$group == "BS+TF") / length(df$group) * 100, digits=3)
format(sum(df$group == "BS+TF") / length(df$group) * 100, digits=2)
rstudio::viewData(dfNames)
nlevels(group)
head(id)
n <- nlevels(df$group)
n
?plot.igraph
# id <- communities(comm)[1:ncomm]
# palette <- brewer.pal(ncomm + 1, "RdYlBu")
# node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
colbar=node.color,
mark.groups=group,
mark.col=NA,
edge.color=c("gray", "red")[crossing(comm, G)+1]
)
topnodes <- nameF
topnodes[btwn < lim] <- NA
require(igraph, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
require(RColorBrewer, quietly=TRUE)
G <- read.graph(file="GroupRunning.gml", format="gml")
require(igraph, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
require(RColorBrewer, quietly=TRUE)
G <- read.graph(file="GroupRunning.gml", format="gml")
listName <- strsplit(V(G)$label, " ")
nameF <- sapply(listName, head, 1)
nameL <- sapply(listName, tail, 1)
label <- nameF
df <- data.frame(nameF, nameL)
grpBS <- as.logical(V(G)$GroupBananaSluggers)
grpBS[is.na(grpBS)] <- FALSE
grpTF <- as.logical(V(G)$GroupTrailFactor)
grpTF[is.na(grpTF)] <- FALSE
group <- rep(NA, length(label))
group[ grpBS & !grpTF] <- "BS"
group[!grpBS &  grpTF] <- "TF"
group[ grpBS &  grpTF] <- "BS+TF"
group <- factor(group)
df <- data.frame(df, group)
print(xtable(table(df$group)), type="html")
deg <- degree(G)
summary(deg)
lim <- sort(deg, decreasing=TRUE)[round(vcount(G) * 0.05)]
top <- data.frame("Name"=V(G)$label, "Group"=group, "Degree"=deg)
top <- subset(top, deg >= lim)
top <- top[order(top$Degree, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
close <- closeness(G)
summary(close)
btwn <- betweenness(G)
summary(btwn)
qplot(btwn, binwidth=1000)
lim <- sort(btwn, decreasing=TRUE)[round(vcount(G) * 0.05)]
top <- data.frame("Name"=V(G)$label, "Group"=group, "Betweenness"=btwn)
top <- subset(top, btwn >= lim)
top <- top[order(top$Betweenness, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_x_log10() +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_x_log10() +
scale_y_log10() +
geom_smooth() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
#   scale_x_log10() +
#   scale_y_log10() +
geom_smooth() +
coord_trans(x="log", y="log") +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
#   scale_x_log10() +
#   scale_y_log10() +
#   geom_smooth() +
coord_trans(x="log", y="log") +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
#   scale_x_log10() +
#   scale_y_log10() +
#   geom_smooth() +
coord_trans(x="log10", y="log10") +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
xlab <- mean(c(min(cntrl$deg), max(cntrl$deg)))
ylab <- mean(c(min(cntrl$btwn), max(cntrl$btwn)))
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_x_log10() +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=xlab, y=log(ylab))
topnodes <- nameF
topnodes[btwn < lim] <- NA
# q <- quantile(btwn, probs=c(0, 0.5, 0.75, 0.9, 0.95, 0.99, 1))
q <- quantile(btwn, probs=c(0, 0.75, 0.9, 0.95, 0.98, 0.99, 1))
size <- cut(btwn, breaks=q, include.lowest=TRUE, dig.lab=5)
summary(size)
V(G)$size <- unclass(size)
# id <- communities(comm)[1:ncomm]
# palette <- brewer.pal(ncomm + 1, "RdYlBu")
# node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
colbar=node.color,
mark.groups=group,
mark.col=NA,
edge.color=c("gray", "red")[crossing(comm, G)+1]
)
comm <- edge.betweenness.community(G)
sizes(comm)
ncomm <- length(sizes(comm)[sizes(comm)>4])
ncomm
head(comm)
id <- communities(comm)[1:ncomm]
head(id)
sizes(comm)
id
id <- communities(comm)[sizes(comm) > 4]
id
palette <- brewer.pal(ncomm + 1, "RdYlBu")
node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
head(node.color)
plot(comm, G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
colbar=node.color,
mark.groups=group,
mark.col=NA,
edge.color=c("gray", "red")[crossing(comm, G)+1]
)
plot(group, G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
colbar=node.color,
mark.groups=group,
mark.col=NA,
edge.color=c("gray", "red")[crossing(group, G)+1]
)
names(comm)
head(comm)
topnodes
# id <- communities(comm)[sizes(comm) > 4]
# palette <- brewer.pal(ncomm + 1, "RdYlBu")
# node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
#      colbar=node.color,
mark.groups=group,
mark.col=NA,
edge.color=c("gray", "red")[crossing(group, G)+1]
)
# id <- communities(comm)[sizes(comm) > 4]
# palette <- brewer.pal(ncomm + 1, "RdYlBu")
# node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
#      colbar=node.color,
mark.groups=group,
mark.col=NA
#      edge.color=c("gray", "red")[crossing(group, G)+1]
)
palette[1:ncomm]
rep(palette[ncomm + 1], max(comm$membership) - ncomm)
palette <- brewer.pal(ncomm + 1, "RdYlBu")
palette
c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color <- palette
g <- erdos.renyi.game(100, 1/100)
comps <- clusters(g)$membership
comps
colbar <- rainbow(max(comps)+1)
colbar
max(comps)
comps+1
colbar[comps+1]
g <- erdos.renyi.game(100, 1/100)
comps <- clusters(g)$membership
colbar <- rainbow(max(comps)+1)
V(g)$color <- colbar[comps+1]
comps
colbar
V(g)$color
comps+1
length(comps)
group <- rep(NA, length(label))
group[!grpBS &  grpTF] <- 1
group[ grpBS & !grpTF] <- 2
group[ grpBS &  grpTF] <- 3
group <- factor(group, labels=c("TF", "BS", "BS+TF"))
df <- data.frame(df, group)
table(group)
V(G)$color[group == 1] <- palette[1]
V(G)$color
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color[group == 1] <- palette[1]
V(G)$color[group == 2] <- palette[2]
V(G)$color[group == 3] <- palette[3]
table(V(G)$color)
table(group)
palette
group == 1
group <- rep(NA, length(label))
group[!grpBS &  grpTF] <- 1
group[ grpBS & !grpTF] <- 2
group[ grpBS &  grpTF] <- 3
group <- factor(group, labels=c("TF", "BS", "BS+TF"))
df <- data.frame(df, group)
group == 1
group == "TF"
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color[group ==    "TF"] <- palette[1]
V(G)$color[group == "BS"   ] <- palette[2]
V(G)$color[group == "BS+TF"] <- palette[3]
table(V(G)$color)
# id <- communities(comm)[sizes(comm) > 4]
# palette <- brewer.pal(ncomm + 1, "RdYlBu")
# node.color <- c(palette[1:ncomm], rep(palette[ncomm + 1], max(comm$membership) - ncomm))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color[group ==    "TF"] <- palette[1]
V(G)$color[group == "BS"   ] <- palette[2]
V(G)$color[group == "BS+TF"] <- palette[3]
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="gray",
#      colbar=node.color,
mark.groups=group,
mark.col=NA
#      edge.color=c("gray", "red")[crossing(group, G)+1]
)
G <- read.graph(file="GroupRunning.gml", format="gml")
head(V(G)$size)
V(G)$size
table(unclass(size))
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color[group ==    "TF"] <- palette[1]
V(G)$color[group == "BS"   ] <- palette[2]
V(G)$color[group == "BS+TF"] <- palette[3]
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="lightgray",
mark.groups=group,
mark.col=NA
)
V(G)$size <- 1
n <- nlevels(df$group)
palette <- brewer.pal(n, "RdYlBu")
V(G)$color[group ==    "TF"] <- palette[1]
V(G)$color[group == "BS"   ] <- palette[2]
V(G)$color[group == "BS+TF"] <- palette[3]
plot(G, main="BananaSluggers + TrailFactor Facebook network",
vertex.label=topnodes,
vertex.label.color="black",
vertex.label.dist=0.5,
vertex.label.family="sans",
vertex.frame.color="lightgray",
mark.groups=group,
mark.col=NA
)
